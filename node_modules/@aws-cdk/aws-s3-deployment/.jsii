{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "case": "1.6.3"
  },
  "dependencies": {
    "@aws-cdk/aws-cloudfront": "1.204.0",
    "@aws-cdk/aws-ec2": "1.204.0",
    "@aws-cdk/aws-efs": "1.204.0",
    "@aws-cdk/aws-iam": "1.204.0",
    "@aws-cdk/aws-lambda": "1.204.0",
    "@aws-cdk/aws-logs": "1.204.0",
    "@aws-cdk/aws-s3": "1.204.0",
    "@aws-cdk/aws-s3-assets": "1.204.0",
    "@aws-cdk/core": "1.204.0",
    "@aws-cdk/lambda-layer-awscli": "1.204.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudfront": {
      "submodules": {
        "@aws-cdk/aws-cloudfront.experimental": {}
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFront",
          "packageId": "Amazon.CDK.AWS.CloudFront"
        },
        "java": {
          "maven": {
            "artifactId": "cloudfront",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudfront"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudfront"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudfront",
          "module": "aws_cdk.aws_cloudfront"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/lambda-layer-awscli": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.LambdaLayer.AwsCli",
          "packageId": "Amazon.CDK.LambdaLayer.AwsCli"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-lambda-layer-awscli",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.lambdalayer.awscli"
        },
        "js": {
          "npm": "@aws-cdk/lambda-layer-awscli"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.lambda-layer-awscli",
          "module": "aws_cdk.lambda_layer_awscli"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Constructs for deploying contents to S3 buckets",
  "docs": {
    "deprecated": "AWS CDK v1 has reached End-of-Support on 2023-06-01.\nThis package is no longer being updated, and users should migrate to AWS CDK v2.\n\nFor more information on how to migrate, see https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html",
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.84.0 (build 5404dcf)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "s3"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-s3-deployment",
  "readme": {
    "markdown": "# AWS S3 Deployment Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![End-of-Support](https://img.shields.io/badge/End--of--Support-critical.svg?style=for-the-badge)\n\n> AWS CDK v1 has reached End-of-Support on 2023-06-01.\n> This package is no longer being updated, and users should migrate to AWS CDK v2.\n>\n> For more information on how to migrate, see the [_Migrating to AWS CDK v2_ guide][doc].\n>\n> [doc]: https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis library allows populating an S3 bucket with the contents of .zip files\nfrom other S3 buckets or from local disk.\n\nThe following example defines a publicly accessible S3 bucket with web hosting\nenabled and populates it from a local directory on disk.\n\n```ts\nconst websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true,\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n});\n```\n\nThis is what happens under the hood:\n\n1. When this stack is deployed (either via `cdk deploy` or via CI/CD), the\n   contents of the local `website-dist` directory will be archived and uploaded\n   to an intermediary assets bucket. If there is more than one source, they will\n   be individually uploaded.\n2. The `BucketDeployment` construct synthesizes a custom CloudFormation resource\n   of type `Custom::CDKBucketDeployment` into the template. The source bucket/key\n   is set to point to the assets bucket.\n3. The custom resource downloads the .zip archive, extracts it and issues `aws\n   s3 sync --delete` against the destination bucket (in this case\n   `websiteBucket`). If there is more than one source, the sources will be\n   downloaded and merged pre-deployment at this step.\n\nIf you are referencing the filled bucket in another construct that depends on\nthe files already be there, be sure to use `deployment.deployedBucket`. This\nwill ensure the bucket deployment has finished before the resource that uses\nthe bucket is created:\n\n```ts\ndeclare const websiteBucket: s3.Bucket;\n\nconst deployment = new s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket: websiteBucket,\n});\n\nnew ConstructThatReadsFromTheBucket(this, 'Consumer', {\n  // Use 'deployment.deployedBucket' instead of 'websiteBucket' here\n  bucket: deployment.deployedBucket,\n});\n```\n\n## Supported sources\n\nThe following source types are supported for bucket deployments:\n\n- Local .zip file: `s3deploy.Source.asset('/path/to/local/file.zip')`\n- Local directory: `s3deploy.Source.asset('/path/to/local/directory')`\n- Another bucket: `s3deploy.Source.bucket(bucket, zipObjectKey)`\n- String data: `s3deploy.Source.data('object-key.txt', 'hello, world!')`\n  (supports [deploy-time values](#data-with-deploy-time-values))\n- JSON data: `s3deploy.Source.jsonData('object-key.json', { json: 'object' })`\n  (supports [deploy-time values](#data-with-deploy-time-values))\n\nTo create a source from a single file, you can pass `AssetOptions` to exclude\nall but a single file:\n\n- Single file: `s3deploy.Source.asset('/path/to/local/directory', { exclude: ['**', '!onlyThisFile.txt'] })`\n\n**IMPORTANT** The `aws-s3-deployment` module is only intended to be used with\nzip files from trusted sources. Directories bundled by the CDK CLI (by using\n`Source.asset()` on a directory) are safe. If you are using `Source.asset()` or\n`Source.bucket()` to reference an existing zip file, make sure you trust the\nfile you are referencing. Zips from untrusted sources might be able to execute\narbitrary code in the Lambda Function used by this module, and use its permissions\nto read or write unexpected files in the S3 bucket.\n\n## Retain on Delete\n\nBy default, the contents of the destination bucket will **not** be deleted when the\n`BucketDeployment` resource is removed from the stack or when the destination is\nchanged. You can use the option `retainOnDelete: false` to disable this behavior,\nin which case the contents will be deleted.\n\nConfiguring this has a few implications you should be aware of:\n\n- **Logical ID Changes**\n\n  Changing the logical ID of the `BucketDeployment` construct, without changing the destination\n  (for example due to refactoring, or intentional ID change) **will result in the deletion of the objects**.\n  This is because CloudFormation will first create the new resource, which will have no affect,\n  followed by a deletion of the old resource, which will cause a deletion of the objects,\n  since the destination hasn't changed, and `retainOnDelete` is `false`.\n\n- **Destination Changes**\n\n  When the destination bucket or prefix is changed, all files in the previous destination will **first** be\n  deleted and then uploaded to the new destination location. This could have availability implications\n  on your users.\n\n### General Recommendations\n\n#### Shared Bucket\n\nIf the destination bucket **is not** dedicated to the specific `BucketDeployment` construct (i.e shared by other entities),\nwe recommend to always configure the `destinationKeyPrefix` property. This will prevent the deployment from\naccidentally deleting data that wasn't uploaded by it.\n\n#### Dedicated Bucket\n\nIf the destination bucket **is** dedicated, it might be reasonable to skip the prefix configuration,\nin which case, we recommend to remove `retainOnDelete: false`, and instead, configure the\n[`autoDeleteObjects`](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-s3-readme.html#bucket-deletion)\nproperty on the destination bucket. This will avoid the logical ID problem mentioned above.\n\n## Prune\n\nBy default, files in the destination bucket that don't exist in the source will be deleted\nwhen the `BucketDeployment` resource is created or updated. You can use the option `prune: false` to disable\nthis behavior, in which case the files will not be deleted.\n\n```ts\ndeclare const destinationBucket: s3.Bucket;\nnew s3deploy.BucketDeployment(this, 'DeployMeWithoutDeletingFilesOnDestination', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  prune: false,\n});\n```\n\nThis option also enables you to\nmultiple bucket deployments for the same destination bucket & prefix,\neach with its own characteristics. For example, you can set different cache-control headers\nbased on file extensions:\n\n```ts\ndeclare const destinationBucket: s3.Bucket;\nnew s3deploy.BucketDeployment(this, 'BucketDeployment', {\n  sources: [s3deploy.Source.asset('./website', { exclude: ['index.html'] })],\n  destinationBucket,\n  cacheControl: [s3deploy.CacheControl.fromString('max-age=31536000,public,immutable')],\n  prune: false,\n});\n\nnew s3deploy.BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [s3deploy.Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket,\n  cacheControl: [s3deploy.CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n  prune: false,\n});\n```\n\n## Exclude and Include Filters\n\nThere are two points at which filters are evaluated in a deployment: asset bundling and the actual deployment. If you simply want to exclude files in the asset bundling process, you should leverage the `exclude` property of `AssetOptions` when defining your source:\n\n```ts\ndeclare const destinationBucket: s3.Bucket;\nnew s3deploy.BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [s3deploy.Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket,\n});\n```\n\nIf you want to specify filters to be used in the deployment process, you can use the `exclude` and `include` filters on `BucketDeployment`.  If excluded, these files will not be deployed to the destination bucket. In addition, if the file already exists in the destination bucket, it will not be deleted if you are using the `prune` option:\n\n```ts\ndeclare const destinationBucket: s3.Bucket;\nnew s3deploy.BucketDeployment(this, 'DeployButExcludeSpecificFiles', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  exclude: ['*.txt'],\n});\n```\n\nThese filters follow the same format that is used for the AWS CLI.  See the CLI documentation for information on [Using Include and Exclude Filters](https://docs.aws.amazon.com/cli/latest/reference/s3/index.html#use-of-exclude-and-include-filters).\n\n## Objects metadata\n\nYou can specify metadata to be set on all the objects in your deployment.\nThere are 2 types of metadata in S3: system-defined metadata and user-defined metadata.\nSystem-defined metadata have a special purpose, for example cache-control defines how long to keep an object cached.\nUser-defined metadata are not used by S3 and keys always begin with `x-amz-meta-` (this prefix is added automatically).\n\nSystem defined metadata keys include the following:\n\n- cache-control (`--cache-control` in `aws s3 sync`)\n- content-disposition (`--content-disposition` in `aws s3 sync`)\n- content-encoding (`--content-encoding` in `aws s3 sync`)\n- content-language (`--content-language` in `aws s3 sync`)\n- content-type (`--content-type` in `aws s3 sync`)\n- expires (`--expires` in `aws s3 sync`)\n- x-amz-storage-class (`--storage-class` in `aws s3 sync`)\n- x-amz-website-redirect-location (`--website-redirect` in `aws s3 sync`)\n- x-amz-server-side-encryption (`--sse` in `aws s3 sync`)\n- x-amz-server-side-encryption-aws-kms-key-id (`--sse-kms-key-id` in `aws s3 sync`)\n- x-amz-server-side-encryption-customer-algorithm (`--sse-c-copy-source` in `aws s3 sync`)\n- x-amz-acl (`--acl` in `aws s3 sync`)\n\nYou can find more information about system defined metadata keys in\n[S3 PutObject documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html)\nand [`aws s3 sync` documentation](https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html).\n\n```ts\nconst websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true,\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: s3deploy.StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: s3deploy.ServerSideEncryption.AES_256,\n  cacheControl: [\n    s3deploy.CacheControl.setPublic(),\n    s3deploy.CacheControl.maxAge(Duration.hours(1)),\n  ],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});\n```\n\n## CloudFront Invalidation\n\nYou can provide a CloudFront distribution and optional paths to invalidate after the bucket deployment finishes.\n\n```ts\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\n\nconst bucket = new s3.Bucket(this, 'Destination');\n\n// Handles buckets whether or not they are configured for website hosting.\nconst distribution = new cloudfront.Distribution(this, 'Distribution', {\n  defaultBehavior: { origin: new origins.S3Origin(bucket) },\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: bucket,\n  distribution,\n  distributionPaths: ['/images/*.png'],\n});\n```\n\n## Size Limits\n\nThe default memory limit for the deployment resource is 128MiB. If you need to\ncopy larger files, you can use the `memoryLimit` configuration to increase the\nsize of the AWS Lambda resource handler.\n\nThe default ephemeral storage size for the deployment resource is 512MiB. If you\nneed to upload larger files, you may hit this limit. You can use the\n`ephemeralStorageSize` configuration to increase the storage size of the AWS Lambda\nresource handler.\n\n> NOTE: a new AWS Lambda handler will be created in your stack for each combination\n> of memory and storage size.\n\n## EFS Support\n\nIf your workflow needs more disk space than default (512 MB) disk space, you may attach an EFS storage to underlying\nlambda function. To Enable EFS support set `efs` and `vpc` props for BucketDeployment.\n\nCheck sample usage below.\nPlease note that creating VPC inline may cause stack deletion failures. It is shown as below for simplicity.\nTo avoid such condition, keep your network infra (VPC) in a separate stack and pass as props.\n\n```ts\ndeclare const destinationBucket: s3.Bucket;\ndeclare const vpc: ec2.Vpc;\n\nnew s3deploy.BucketDeployment(this, 'DeployMeWithEfsStorage', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  destinationKeyPrefix: 'efs/',\n  useEfs: true,\n  vpc,\n  retainOnDelete: false,\n});\n```\n\n## Data with deploy-time values\n\nThe content passed to `Source.data()` or `Source.jsonData()` can include\nreferences that will get resolved only during deployment.\n\nFor example:\n\n```ts\nimport * as sns from '@aws-cdk/aws-sns';\n\ndeclare const destinationBucket: s3.Bucket;\ndeclare const topic: sns.Topic;\n\nconst appConfig = {\n  topic_arn: topic.topicArn,\n  base_url: 'https://my-endpoint',\n};\n\nnew s3deploy.BucketDeployment(this, 'BucketDeployment', {\n  sources: [s3deploy.Source.jsonData('config.json', appConfig)],\n  destinationBucket,\n});\n```\n\nThe value in `topic.topicArn` is a deploy-time value. It only gets resolved\nduring deployment by placing a marker in the generated source file and\nsubstituting it when its deployed to the destination with the actual value.\n\n## Notes\n\n- This library uses an AWS CloudFormation custom resource which is about 10MiB in\n  size. The code of this resource is bundled with this library.\n- AWS Lambda execution time is limited to 15min. This limits the amount of data\n  which can be deployed into the bucket by this timeout.\n- When the `BucketDeployment` is removed from the stack, the contents are retained\n  in the destination bucket ([#952](https://github.com/aws/aws-cdk/issues/952)).\n- If you are using `s3deploy.Source.bucket()` to take the file source from\n  another bucket: the deployed files will only be updated if the key (file name)\n  of the file in the source  bucket changes. Mutating the file in place will not\n  be good enough: the custom resource will simply not run if the properties don't\n  change.\n  - If you use assets (`s3deploy.Source.asset()`) you don't need to worry\n    about this: the asset system will make sure that if the files have changed,\n    the file name is unique and the deployment will run.\n\n## Development\n\nThe custom resource is implemented in Python 3.7 in order to be able to leverage\nthe AWS CLI for \"aws s3 sync\". The code is under [`lib/lambda`](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-s3-deployment/lib/lambda) and\nunit tests are under [`test/lambda`](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-s3-deployment/test/lambda).\n\nThis package requires Python 3.7 during build time in order to create the custom\nresource Lambda bundle and test it. It also relies on a few bash scripts, so\nmight be tricky to build on Windows.\n\n## Roadmap\n\n- [ ] Support \"blue/green\" deployments ([#954](https://github.com/aws/aws-cdk/issues/954))\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-s3-deployment",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.S3.Deployment",
      "packageId": "Amazon.CDK.AWS.S3.Deployment"
    },
    "java": {
      "maven": {
        "artifactId": "s3-deployment",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.s3.deployment"
    },
    "js": {
      "npm": "@aws-cdk/aws-s3-deployment"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-s3-deployment",
      "module": "aws_cdk.aws_s3_deployment"
    }
  },
  "types": {
    "@aws-cdk/aws-s3-deployment.BucketDeployment": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "`BucketDeployment` populates an S3 bucket with the contents of .zip files from other S3 buckets or from local disk.",
        "example": "declare const websiteBucket: s3.Bucket;\n\nconst deployment = new s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket: websiteBucket,\n});\n\nnew ConstructThatReadsFromTheBucket(this, 'Consumer', {\n  // Use 'deployment.deployedBucket' instead of 'websiteBucket' here\n  bucket: deployment.deployedBucket,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.BucketDeployment",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/bucket-deployment.ts",
          "line": 253
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.BucketDeploymentProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 248
      },
      "name": "BucketDeployment",
      "properties": [
        {
          "docs": {
            "remarks": "If you want to reference the destination bucket in another construct and make sure the\nbucket deployment has happened before the next operation is started, pass the other construct\na reference to `deployment.deployedBucket`.\n\nDoing this replaces calling `otherResource.node.addDependency(deployment)`.",
            "stability": "stable",
            "summary": "The bucket after the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 434
          },
          "name": "deployedBucket",
          "type": {
            "fqn": "@aws-cdk/aws-s3.IBucket"
          }
        }
      ],
      "symbolId": "lib/bucket-deployment:BucketDeployment"
    },
    "@aws-cdk/aws-s3-deployment.BucketDeploymentProps": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for `BucketDeployment`.",
        "example": "declare const websiteBucket: s3.Bucket;\n\nconst deployment = new s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket: websiteBucket,\n});\n\nnew ConstructThatReadsFromTheBucket(this, 'Consumer', {\n  // Use 'deployment.deployedBucket' instead of 'websiteBucket' here\n  bucket: deployment.deployedBucket,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.BucketDeploymentProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 24
      },
      "name": "BucketDeploymentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The S3 bucket to sync the contents of the zip file to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 33
          },
          "name": "destinationBucket",
          "type": {
            "fqn": "@aws-cdk/aws-s3.IBucket"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The sources from which to deploy the contents of this bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 28
          },
          "name": "sources",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-s3-deployment.ISource"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl",
            "stability": "stable",
            "summary": "System-defined x-amz-acl metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 225
          },
          "name": "accessControl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-s3.BucketAccessControl"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined cache-control metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 158
          },
          "name": "cacheControl",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined cache-disposition metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 164
          },
          "name": "contentDisposition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined content-encoding metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 170
          },
          "name": "contentEncoding",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined content-language metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 176
          },
          "name": "contentLanguage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined content-type metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 182
          },
          "name": "contentType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"/\" (unzip to root of the destination bucket)",
            "remarks": "Must be <=104 characters",
            "stability": "stable",
            "summary": "Key prefix in the destination bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 42
          },
          "name": "destinationKeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No invalidation occurs",
            "remarks": "Files in the distribution's edge caches will be invalidated after\nfiles are uploaded to the destination bucket.",
            "stability": "stable",
            "summary": "The CloudFront distribution using the destination bucket as an origin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 96
          },
          "name": "distribution",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudfront.IDistribution"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All files under the destination bucket key prefix will be invalidated.",
            "stability": "stable",
            "summary": "The file paths to invalidate in the CloudFront distribution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 103
          },
          "name": "distributionPaths",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512 MiB",
            "stability": "stable",
            "summary": "The size of the AWS Lambda function’s /tmp directory in MiB."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 129
          },
          "name": "ephemeralStorageSize",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No exclude filters are used",
            "remarks": "This can be used to exclude a file from being pruned in the destination bucket.\n\nIf you want to just exclude files from the deployment package (which excludes these files\nevaluated when invalidating the asset), you should leverage the `exclude` property of\n`AssetOptions` when defining your source.",
            "see": "https://docs.aws.amazon.com/cli/latest/reference/s3/index.html#use-of-exclude-and-include-filters",
            "stability": "stable",
            "summary": "If this is set, matching files or objects will be excluded from the deployment's sync command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 55
          },
          "name": "exclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The objects in the distribution will not expire.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined expires metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 188
          },
          "name": "expires",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Expiration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No include filters are used and all files are included with the sync command",
            "remarks": "Since all files from the deployment package are included by default, this property\nis usually leveraged alongside an `exclude` filter.",
            "see": "https://docs.aws.amazon.com/cli/latest/reference/s3/index.html#use-of-exclude-and-include-filters",
            "stability": "stable",
            "summary": "If this is set, matching files or objects will be included with the deployment's sync command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 65
          },
          "name": "include",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "logs.RetentionDays.INFINITE",
            "stability": "stable",
            "summary": "The number of days that the lambda function's log events are kept in CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 111
          },
          "name": "logRetention",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.RetentionDays"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "128",
            "remarks": "If you are deploying large files, you will need to increase this number\naccordingly.",
            "stability": "stable",
            "summary": "The amount of memory (in MiB) to allocate to the AWS Lambda function which replicates the files from the CDK bucket to the destination bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 122
          },
          "name": "memoryLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No user metadata is set",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#UserMetadata",
            "stability": "stable",
            "summary": "User-defined object metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 151
          },
          "name": "metadata",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-s3-deployment.UserDefinedObjectMetadata"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html",
            "stability": "stable",
            "summary": "If this is set to false, files in the destination bucket that do not exist in the asset, will NOT be deleted during deployment (create/update)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 75
          },
          "name": "prune",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true - when resource is deleted/updated, files are retained",
            "remarks": "NOTICE: Configuring this to \"false\" might have operational implications. Please\nvisit to the package documentation referred below to make sure you fully understand those implications.",
            "see": "https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-s3-deployment#retain-on-delete",
            "stability": "stable",
            "summary": "If this is set to \"false\", the destination files will be deleted when the resource is deleted or the destination is updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 87
          },
          "name": "retainOnDelete",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A role is automatically created",
            "stability": "stable",
            "summary": "Execution role associated with this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 144
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Server side encryption is not used.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined x-amz-server-side-encryption metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 194
          },
          "name": "serverSideEncryption",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-s3-deployment.ServerSideEncryption"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined x-amz-server-side-encryption-aws-kms-key-id metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 212
          },
          "name": "serverSideEncryptionAwsKmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not set.",
            "remarks": "Warning: This is not a useful parameter until this bug is fixed: https://github.com/aws/aws-cdk/issues/6080",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html#sse-c-how-to-programmatically-intro",
            "stability": "stable",
            "summary": "System-defined x-amz-server-side-encryption-customer-algorithm metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 219
          },
          "name": "serverSideEncryptionCustomerAlgorithm",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Default storage-class for the bucket is used.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined x-amz-storage-class metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 200
          },
          "name": "storageClass",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-s3-deployment.StorageClass"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No EFS. Lambda has access only to 512MB of disk space.",
            "remarks": "Enable this if your assets are large and you encounter disk space errors.\nEnabling this option will require a VPC to be specified.",
            "stability": "stable",
            "summary": "Mount an EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 137
          },
          "name": "useEfs",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "None",
            "remarks": "This is required if `useEfs` is set.",
            "stability": "stable",
            "summary": "The VPC network to place the deployment lambda handler in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 233
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the Vpc default strategy if not specified",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Where in the VPC to place the deployment lambda handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 241
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No website redirection.",
            "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
            "stability": "stable",
            "summary": "System-defined x-amz-website-redirect-location metadata to be set on all objects in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 206
          },
          "name": "websiteRedirectLocation",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/bucket-deployment:BucketDeploymentProps"
    },
    "@aws-cdk/aws-s3-deployment.CacheControl": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
        "stability": "stable",
        "summary": "Used for HTTP cache-control header, which influences downstream caches.",
        "example": "declare const destinationBucket: s3.Bucket;\nnew s3deploy.BucketDeployment(this, 'BucketDeployment', {\n  sources: [s3deploy.Source.asset('./website', { exclude: ['index.html'] })],\n  destinationBucket,\n  cacheControl: [s3deploy.CacheControl.fromString('max-age=31536000,public,immutable')],\n  prune: false,\n});\n\nnew s3deploy.BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [s3deploy.Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket,\n  cacheControl: [s3deploy.CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n  prune: false,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.CacheControl",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 530
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Constructs a custom cache control key from the literal value."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 575
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'max-age=<duration-in-seconds>'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 565
          },
          "name": "maxAge",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "@aws-cdk/core.Duration"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'must-revalidate'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 535
          },
          "name": "mustRevalidate",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'no-cache'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 540
          },
          "name": "noCache",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'no-transform'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 545
          },
          "name": "noTransform",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'proxy-revalidate'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 560
          },
          "name": "proxyRevalidate",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'private'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 555
          },
          "name": "setPrivate",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 'public'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 550
          },
          "name": "setPublic",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Sets 's-maxage=<duration-in-seconds>'."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 570
          },
          "name": "sMaxAge",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "@aws-cdk/core.Duration"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.CacheControl"
            }
          },
          "static": true
        }
      ],
      "name": "CacheControl",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The raw cache control setting."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 581
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/bucket-deployment:CacheControl"
    },
    "@aws-cdk/aws-s3-deployment.DeploymentSourceContext": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Bind context for ISources.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3_deployment from '@aws-cdk/aws-s3-deployment';\n\ndeclare const role: iam.Role;\nconst deploymentSourceContext: s3_deployment.DeploymentSourceContext = {\n  handlerRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.DeploymentSourceContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/source.ts",
        "line": 37
      },
      "name": "DeploymentSourceContext",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The role for the handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 41
          },
          "name": "handlerRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/source:DeploymentSourceContext"
    },
    "@aws-cdk/aws-s3-deployment.Expires": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "deprecated": "use core.Expiration",
        "remarks": "Does NOT influence deletion of the object.",
        "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
        "stability": "deprecated",
        "summary": "Used for HTTP expires header, which influences downstream caches.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as s3_deployment from '@aws-cdk/aws-s3-deployment';\nimport * as cdk from '@aws-cdk/core';\nconst expires = s3_deployment.Expires.after(cdk.Duration.minutes(30));",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.Expires",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 651
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Expire once the specified duration has passed since deployment time."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 668
          },
          "name": "after",
          "parameters": [
            {
              "docs": {
                "summary": "the duration to wait before expiring."
              },
              "name": "t",
              "type": {
                "fqn": "@aws-cdk/core.Duration"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.Expires"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Expire at the specified date."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 656
          },
          "name": "atDate",
          "parameters": [
            {
              "docs": {
                "summary": "date to expire at."
              },
              "name": "d",
              "type": {
                "primitive": "date"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.Expires"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Expire at the specified timestamp."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 662
          },
          "name": "atTimestamp",
          "parameters": [
            {
              "docs": {
                "summary": "timestamp in unix milliseconds."
              },
              "name": "t",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.Expires"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Create an expiration date from a raw date string."
          },
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 673
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.Expires"
            }
          },
          "static": true
        }
      ],
      "name": "Expires",
      "properties": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "The raw expiration date expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/bucket-deployment.ts",
            "line": 679
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/bucket-deployment:Expires"
    },
    "@aws-cdk/aws-s3-deployment.ISource": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "stability": "stable",
        "summary": "Represents a source for bucket deployments."
      },
      "fqn": "@aws-cdk/aws-s3-deployment.ISource",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/source.ts",
        "line": 47
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Binds the source to a bucket deployment."
          },
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 52
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "The construct tree context."
              },
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "context",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-s3-deployment.DeploymentSourceContext"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.SourceConfig"
            }
          }
        }
      ],
      "name": "ISource",
      "symbolId": "lib/source:ISource"
    },
    "@aws-cdk/aws-s3-deployment.ServerSideEncryption": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
        "stability": "stable",
        "summary": "Indicates whether server-side encryption is enabled for the object, and whether that encryption is from the AWS Key Management Service (AWS KMS) or from Amazon S3 managed encryption (SSE-S3).",
        "example": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true,\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: s3deploy.StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: s3deploy.ServerSideEncryption.AES_256,\n  cacheControl: [\n    s3deploy.CacheControl.setPublic(),\n    s3deploy.CacheControl.maxAge(Duration.hours(1)),\n  ],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.ServerSideEncryption",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 590
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "'AES256'."
          },
          "name": "AES_256"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'aws:kms'."
          },
          "name": "AWS_KMS"
        }
      ],
      "name": "ServerSideEncryption",
      "symbolId": "lib/bucket-deployment:ServerSideEncryption"
    },
    "@aws-cdk/aws-s3-deployment.Source": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "remarks": "Usage:\n\n     Source.bucket(bucket, key)\n     Source.asset('/local/path/to/directory')\n     Source.asset('/local/path/to/a/file.zip')\n     Source.data('hello/world/file.txt', 'Hello, world!')\n     Source.data('config.json', { baz: topic.topicArn })",
        "stability": "stable",
        "summary": "Specifies bucket deployment source.",
        "example": "declare const websiteBucket: s3.Bucket;\n\nconst deployment = new s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket: websiteBucket,\n});\n\nnew ConstructThatReadsFromTheBucket(this, 'Consumer', {\n  // Use 'deployment.deployedBucket' instead of 'websiteBucket' here\n  bucket: deployment.deployedBucket,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.Source",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/source.ts",
        "line": 67
      },
      "methods": [
        {
          "docs": {
            "remarks": "If the local asset is a .zip archive, make sure you trust the\nproducer of the archive.",
            "stability": "stable",
            "summary": "Uses a local asset as the deployment source."
          },
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 97
          },
          "name": "asset",
          "parameters": [
            {
              "docs": {
                "summary": "The path to a local .zip file or a directory."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-s3-assets.AssetOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.ISource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Make sure you trust the producer of the archive.",
            "stability": "stable",
            "summary": "Uses a .zip file stored in an S3 bucket as the source for the destination bucket contents."
          },
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 76
          },
          "name": "bucket",
          "parameters": [
            {
              "docs": {
                "summary": "The S3 Bucket."
              },
              "name": "bucket",
              "type": {
                "fqn": "@aws-cdk/aws-s3.IBucket"
              }
            },
            {
              "docs": {
                "summary": "The S3 object key of the zip file with contents."
              },
              "name": "zipObjectKey",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.ISource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The\ncontent can include deploy-time values (such as `snsTopic.topicArn`) that\nwill get resolved only during deployment.\n\nTo store a JSON object use `Source.jsonData()`.",
            "stability": "stable",
            "summary": "Deploys an object with the specified string contents into the bucket."
          },
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 136
          },
          "name": "data",
          "parameters": [
            {
              "docs": {
                "summary": "The destination S3 object key (relative to the root of the S3 deployment)."
              },
              "name": "objectKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The data to be stored in the object."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.ISource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The\nobject can include deploy-time values (such as `snsTopic.topicArn`) that\nwill get resolved only during deployment.",
            "stability": "stable",
            "summary": "Deploys an object with the specified JSON object into the bucket."
          },
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 163
          },
          "name": "jsonData",
          "parameters": [
            {
              "docs": {
                "summary": "The destination S3 object key (relative to the root of the S3 deployment)."
              },
              "name": "objectKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "A JSON object."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-s3-deployment.ISource"
            }
          },
          "static": true
        }
      ],
      "name": "Source",
      "symbolId": "lib/source:Source"
    },
    "@aws-cdk/aws-s3-deployment.SourceConfig": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Source information.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as s3_deployment from '@aws-cdk/aws-s3-deployment';\n\ndeclare const bucket: s3.Bucket;\ndeclare const markers: any;\nconst sourceConfig: s3_deployment.SourceConfig = {\n  bucket: bucket,\n  zipObjectKey: 'zipObjectKey',\n\n  // the properties below are optional\n  markers: {\n    markersKey: markers,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.SourceConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/source.ts",
        "line": 16
      },
      "name": "SourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The source bucket to deploy from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 20
          },
          "name": "bucket",
          "type": {
            "fqn": "@aws-cdk/aws-s3.IBucket"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "An S3 object key in the source bucket that points to a zip file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 25
          },
          "name": "zipObjectKey",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no markers",
            "stability": "stable",
            "summary": "A set of markers to substitute in the source content."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/source.ts",
            "line": 31
          },
          "name": "markers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/source:SourceConfig"
    },
    "@aws-cdk/aws-s3-deployment.StorageClass": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "docs": {
        "see": "https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#SysMetadata",
        "stability": "stable",
        "summary": "Storage class used for storing the object.",
        "example": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true,\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: s3deploy.StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: s3deploy.ServerSideEncryption.AES_256,\n  cacheControl: [\n    s3deploy.CacheControl.setPublic(),\n    s3deploy.CacheControl.maxAge(Duration.hours(1)),\n  ],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.StorageClass",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 607
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "'STANDARD'."
          },
          "name": "STANDARD"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'REDUCED_REDUNDANCY'."
          },
          "name": "REDUCED_REDUNDANCY"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'STANDARD_IA'."
          },
          "name": "STANDARD_IA"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'ONEZONE_IA'."
          },
          "name": "ONEZONE_IA"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'INTELLIGENT_TIERING'."
          },
          "name": "INTELLIGENT_TIERING"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'GLACIER'."
          },
          "name": "GLACIER"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "'DEEP_ARCHIVE'."
          },
          "name": "DEEP_ARCHIVE"
        }
      ],
      "name": "StorageClass",
      "symbolId": "lib/bucket-deployment:StorageClass"
    },
    "@aws-cdk/aws-s3-deployment.UserDefinedObjectMetadata": {
      "assembly": "@aws-cdk/aws-s3-deployment",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Custom user defined metadata.",
        "example": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true,\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: s3deploy.StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: s3deploy.ServerSideEncryption.AES_256,\n  cacheControl: [\n    s3deploy.CacheControl.setPublic(),\n    s3deploy.CacheControl.maxAge(Duration.hours(1)),\n  ],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-s3-deployment.UserDefinedObjectMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/bucket-deployment.ts",
        "line": 686
      },
      "name": "UserDefinedObjectMetadata",
      "symbolId": "lib/bucket-deployment:UserDefinedObjectMetadata"
    }
  },
  "version": "1.204.0",
  "fingerprint": "**********"
}