"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const find_cloudwatch_logs_1 = require("../../../lib/api/logs/find-cloudwatch-logs");
const util_1 = require("../../util");
const mock_sdk_1 = require("../../util/mock-sdk");
let logsMockSdkProvider;
let mockGetEndpointSuffix;
beforeEach(() => {
    logsMockSdkProvider = new LogsMockSdkProvider();
    mockGetEndpointSuffix = jest.fn(() => 'amazonaws.com');
    logsMockSdkProvider.stubGetEndpointSuffix(mockGetEndpointSuffix);
    // clear the array
    currentCfnStackResources.splice(0);
});
test('add log groups from lambda function', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                Func: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        FunctionName: 'my-function',
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('Func', 'AWS::Lambda::Function', 'my-function'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['/aws/lambda/my-function']);
});
test('add log groups from lambda function when using custom LoggingConfig', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                Func: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        FunctionName: 'my-function',
                        LoggingConfig: {
                            LogGroup: '/this/custom/my-custom-log-group',
                        },
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('Func', 'AWS::Lambda::Function', 'my-function'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['/this/custom/my-custom-log-group']);
});
test('add log groups from lambda function when using custom LoggingConfig using Ref', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                MyCustomLogGroupLogicalId: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: '/this/custom/my-custom-log-group',
                    },
                },
                Func: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        FunctionName: 'my-function',
                        LoggingConfig: {
                            LogGroup: {
                                Ref: 'MyCustomLogGroupLogicalId',
                            },
                        },
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('Func', 'AWS::Lambda::Function', 'my-function'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['/this/custom/my-custom-log-group']);
});
test('add log groups from lambda function without physical name', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                Func: {
                    Type: 'AWS::Lambda::Function',
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('Func', 'AWS::Lambda::Function', 'my-function'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['/aws/lambda/my-function']);
});
test('empty template', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {},
    });
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual([]);
});
test('add log groups from ECS Task Definitions', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                LogGroup: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: 'log_group',
                    },
                },
                Def: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'app',
                        ContainerDefinitions: [
                            {
                                LogConfiguration: {
                                    LogDriver: 'awslogs',
                                    Options: {
                                        'awslogs-group': { Ref: 'LogGroup' },
                                    },
                                },
                            },
                        ],
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('LogGroup', 'AWS::Logs::LogGroup', 'log_group'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['log_group']);
});
test('add log groups from State Machines', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                LogGroup: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: 'log_group',
                    },
                },
                Def: {
                    Type: 'AWS::StepFunctions::StateMachine',
                    Properties: {
                        LoggingConfiguration: {
                            Destinations: [
                                {
                                    CloudWatchLogsLogGroup: {
                                        LogGroupArn: {
                                            'Fn::GetAtt': ['LogGroup', 'Arn'],
                                        },
                                    },
                                },
                            ],
                        },
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('LogGroup', 'AWS::Logs::LogGroup', 'log_group'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['log_group']);
});
test('excluded log groups are not added', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                LogGroup: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: 'log_group',
                    },
                },
                LogGroup2: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: 'log_group2',
                    },
                },
                Def: {
                    Type: 'AWS::CodeBuild::Project',
                    Properties: {
                        PojectName: 'project',
                        LogsConfig: {
                            CloudWatchLogs: {
                                GroupName: { Ref: 'LogGroup' },
                            },
                        },
                    },
                },
                FlowLog: {
                    Type: 'AWS::EC2::FlowLog',
                    Properties: {
                        LogDestination: { Ref: 'LogGroup' },
                    },
                },
                FlowLog2: {
                    Type: 'AWS::EC2::FlowLog',
                    Properties: {
                        LogDestination: {
                            'Fn::GetAtt': ['LogGroup2', 'Arn'],
                        },
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('LogGroup', 'AWS::Logs::LogGroup', 'log_group'));
    pushStackResourceSummaries(stackSummaryOf('LogGroup2', 'AWS::Logs::LogGroup', 'log_group2'));
    pushStackResourceSummaries(stackSummaryOf('FlowLog', 'AWS::EC2::FlowLog', 'flow_log'));
    pushStackResourceSummaries(stackSummaryOf('FlowLog2', 'AWS::EC2::FlowLog', 'flow_log2'));
    pushStackResourceSummaries(stackSummaryOf('Def', 'AWS::CodeBuild:Project', 'project'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual([]);
});
test('unassociated log groups are added', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                LogGroup: {
                    Type: 'AWS::Logs::LogGroup',
                    Properties: {
                        LogGroupName: 'log_group',
                    },
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('LogGroup', 'AWS::Logs::LogGroup', 'log_group'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['log_group']);
});
test('log groups without physical names are added', async () => {
    // GIVEN
    const cdkStackArtifact = cdkStackArtifactOf({
        template: {
            Resources: {
                LogGroup: {
                    Type: 'AWS::Logs::LogGroup',
                },
            },
        },
    });
    pushStackResourceSummaries(stackSummaryOf('LogGroup', 'AWS::Logs::LogGroup', 'log_group'));
    // WHEN
    const result = await (0, find_cloudwatch_logs_1.findCloudWatchLogGroups)(logsMockSdkProvider.mockSdkProvider, cdkStackArtifact);
    // THEN
    expect(result.logGroupNames).toEqual(['log_group']);
});
const STACK_NAME = 'withouterrors';
const currentCfnStackResources = [];
function pushStackResourceSummaries(...items) {
    currentCfnStackResources.push(...items);
}
function stackSummaryOf(logicalId, resourceType, physicalResourceId) {
    return {
        LogicalResourceId: logicalId,
        PhysicalResourceId: physicalResourceId,
        ResourceType: resourceType,
        ResourceStatus: 'CREATE_COMPLETE',
        LastUpdatedTimestamp: new Date(),
    };
}
function cdkStackArtifactOf(testStackArtifact = {}) {
    return (0, util_1.testStack)({
        stackName: STACK_NAME,
        ...testStackArtifact,
    });
}
class LogsMockSdkProvider {
    constructor() {
        this.mockSdkProvider = new mock_sdk_1.MockSdkProvider({ realSdk: false });
        this.mockSdkProvider.stubCloudFormation({
            listStackResources: ({ StackName: stackName }) => {
                if (stackName !== STACK_NAME) {
                    throw new Error(`Expected Stack name in listStackResources() call to be: '${STACK_NAME}', but received: ${stackName}'`);
                }
                return {
                    StackResourceSummaries: currentCfnStackResources,
                };
            },
        });
    }
    stubGetEndpointSuffix(stub) {
        this.mockSdkProvider.stubGetEndpointSuffix(stub);
    }
}
//# sourceMappingURL=data:application/json;base64,